// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ball.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Ball_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Ball_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Ball_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Ball_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ball_2eproto;
class Ball;
class BallDefaultTypeInternal;
extern BallDefaultTypeInternal _Ball_default_instance_;
class BallUpdateEvent;
class BallUpdateEventDefaultTypeInternal;
extern BallUpdateEventDefaultTypeInternal _BallUpdateEvent_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Ball* Arena::CreateMaybeMessage<::Ball>(Arena*);
template<> ::BallUpdateEvent* Arena::CreateMaybeMessage<::BallUpdateEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Ball :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ball) */ {
 public:
  Ball();
  virtual ~Ball();

  Ball(const Ball& from);
  Ball(Ball&& from) noexcept
    : Ball() {
    *this = ::std::move(from);
  }

  inline Ball& operator=(const Ball& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ball& operator=(Ball&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ball& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ball* internal_default_instance() {
    return reinterpret_cast<const Ball*>(
               &_Ball_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ball& a, Ball& b) {
    a.Swap(&b);
  }
  inline void Swap(Ball* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ball* New() const final {
    return CreateMaybeMessage<Ball>(nullptr);
  }

  Ball* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ball>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ball& from);
  void MergeFrom(const Ball& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ball* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ball";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ball_2eproto);
    return ::descriptor_table_Ball_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kVectorXFieldNumber = 4,
    kVectorYFieldNumber = 5,
  };
  // uint64 oid = 1;
  void clear_oid();
  ::PROTOBUF_NAMESPACE_ID::uint64 oid() const;
  void set_oid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double vector_x = 4;
  void clear_vector_x();
  double vector_x() const;
  void set_vector_x(double value);

  // double vector_y = 5;
  void clear_vector_y();
  double vector_y() const;
  void set_vector_y(double value);

  // @@protoc_insertion_point(class_scope:Ball)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 oid_;
  double x_;
  double y_;
  double vector_x_;
  double vector_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ball_2eproto;
};
// -------------------------------------------------------------------

class BallUpdateEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BallUpdateEvent) */ {
 public:
  BallUpdateEvent();
  virtual ~BallUpdateEvent();

  BallUpdateEvent(const BallUpdateEvent& from);
  BallUpdateEvent(BallUpdateEvent&& from) noexcept
    : BallUpdateEvent() {
    *this = ::std::move(from);
  }

  inline BallUpdateEvent& operator=(const BallUpdateEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BallUpdateEvent& operator=(BallUpdateEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BallUpdateEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BallUpdateEvent* internal_default_instance() {
    return reinterpret_cast<const BallUpdateEvent*>(
               &_BallUpdateEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BallUpdateEvent& a, BallUpdateEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BallUpdateEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BallUpdateEvent* New() const final {
    return CreateMaybeMessage<BallUpdateEvent>(nullptr);
  }

  BallUpdateEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BallUpdateEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BallUpdateEvent& from);
  void MergeFrom(const BallUpdateEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BallUpdateEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BallUpdateEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ball_2eproto);
    return ::descriptor_table_Ball_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBallFieldNumber = 3,
    kSizeFieldNumber = 1,
    kSortFieldNumber = 2,
  };
  // repeated .Ball ball = 3;
  int ball_size() const;
  void clear_ball();
  ::Ball* mutable_ball(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Ball >*
      mutable_ball();
  const ::Ball& ball(int index) const;
  ::Ball* add_ball();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Ball >&
      ball() const;

  // uint32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 sort = 2;
  void clear_sort();
  ::PROTOBUF_NAMESPACE_ID::uint32 sort() const;
  void set_sort(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:BallUpdateEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Ball > ball_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sort_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ball_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ball

// uint64 oid = 1;
inline void Ball::clear_oid() {
  oid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ball::oid() const {
  // @@protoc_insertion_point(field_get:Ball.oid)
  return oid_;
}
inline void Ball::set_oid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  oid_ = value;
  // @@protoc_insertion_point(field_set:Ball.oid)
}

// double x = 2;
inline void Ball::clear_x() {
  x_ = 0;
}
inline double Ball::x() const {
  // @@protoc_insertion_point(field_get:Ball.x)
  return x_;
}
inline void Ball::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Ball.x)
}

// double y = 3;
inline void Ball::clear_y() {
  y_ = 0;
}
inline double Ball::y() const {
  // @@protoc_insertion_point(field_get:Ball.y)
  return y_;
}
inline void Ball::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Ball.y)
}

// double vector_x = 4;
inline void Ball::clear_vector_x() {
  vector_x_ = 0;
}
inline double Ball::vector_x() const {
  // @@protoc_insertion_point(field_get:Ball.vector_x)
  return vector_x_;
}
inline void Ball::set_vector_x(double value) {
  
  vector_x_ = value;
  // @@protoc_insertion_point(field_set:Ball.vector_x)
}

// double vector_y = 5;
inline void Ball::clear_vector_y() {
  vector_y_ = 0;
}
inline double Ball::vector_y() const {
  // @@protoc_insertion_point(field_get:Ball.vector_y)
  return vector_y_;
}
inline void Ball::set_vector_y(double value) {
  
  vector_y_ = value;
  // @@protoc_insertion_point(field_set:Ball.vector_y)
}

// -------------------------------------------------------------------

// BallUpdateEvent

// uint32 size = 1;
inline void BallUpdateEvent::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BallUpdateEvent::size() const {
  // @@protoc_insertion_point(field_get:BallUpdateEvent.size)
  return size_;
}
inline void BallUpdateEvent::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:BallUpdateEvent.size)
}

// uint32 sort = 2;
inline void BallUpdateEvent::clear_sort() {
  sort_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BallUpdateEvent::sort() const {
  // @@protoc_insertion_point(field_get:BallUpdateEvent.sort)
  return sort_;
}
inline void BallUpdateEvent::set_sort(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sort_ = value;
  // @@protoc_insertion_point(field_set:BallUpdateEvent.sort)
}

// repeated .Ball ball = 3;
inline int BallUpdateEvent::ball_size() const {
  return ball_.size();
}
inline void BallUpdateEvent::clear_ball() {
  ball_.Clear();
}
inline ::Ball* BallUpdateEvent::mutable_ball(int index) {
  // @@protoc_insertion_point(field_mutable:BallUpdateEvent.ball)
  return ball_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Ball >*
BallUpdateEvent::mutable_ball() {
  // @@protoc_insertion_point(field_mutable_list:BallUpdateEvent.ball)
  return &ball_;
}
inline const ::Ball& BallUpdateEvent::ball(int index) const {
  // @@protoc_insertion_point(field_get:BallUpdateEvent.ball)
  return ball_.Get(index);
}
inline ::Ball* BallUpdateEvent::add_ball() {
  // @@protoc_insertion_point(field_add:BallUpdateEvent.ball)
  return ball_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Ball >&
BallUpdateEvent::ball() const {
  // @@protoc_insertion_point(field_list:BallUpdateEvent.ball)
  return ball_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Ball_2eproto
